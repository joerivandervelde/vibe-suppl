#!/user/bin/env python3
"""
Name:
    VibeBenchmarkFileGenerator.py
Example:
    VibeBenchmarkFileGenerator.py results/ output.tsv (gda_max|dsi|dpi)

Description:
    Processes the output from the scripts generated by VibeBenchmarkBashScriptGenerator.py for usage in R plots.
"""

from argparse import ArgumentParser
from os.path import isfile
from os.path import isdir
from BenchmarkGenerics import mergeFiles

def main():
    # Runs application processes.
    args = fileMergerParser()
    mergeFiles(args.sort, args.inDir, args.out)

def fileMergerParser():
    """
    Processes the command line arguments for a parser that only requires an input directory which contains all the files
    and an output file to which the merged output should be written to.
    :return: args
    """

    # The possible options for args.sort stored in a dictionary.
    sortMethods = {'gda_max': processVibeFileSortByGdaMax, 'dsi': processVibeFileSortByDsi,
                   'dpi': processVibeFileSortByDpi}

    # Defines command line.
    parser = ArgumentParser()
    parser.add_argument("inDir", help="the directory containing all input files")
    parser.add_argument("out", help="the file to write output to")
    parser.add_argument("sort", help="how the genes should be sorted (options: gda_max, dsi, dpi)")

    # Processes command line.
    args = parser.parse_args()

    # Removes last slash from directories for consistency.
    args.inDir = args.inDir.rstrip("/")

    # Removes any spaces from the sort argument.
    args.sort = args.sort.strip()

    # Validates command line.
    if not isdir(args.inDir):
        parser.error('"' + args.inDir.split('/')[-1] + '" is not a valid directory')

    if not args.out.endswith(".tsv"):
        parser.error('"' + args.out.split('/')[-1] + '" is not a .tsv file')
    if isfile(args.out):
        parser.error('"' + args.out.split('/')[-1] + '" already exists')

    # Retrieves the appropriate sorting method or gives a parser error if an invalid option was given.
    args.sort = sortMethods.get(args.sort)
    if args.sort is None:
        parser.error('an invalid sort option has been used')

    return args


def processVibeFileSortByGdaMax(fileWriter, filePath):
    """
    Processes a single output file from the vibe benchmark.
    Writes benchmark output to file using the highest gene-disease association score for gene sorting.
    This should be stored in the third column and sort order will be highest->lowest.
    :param fileWriter: the file to write the output to
    :param filePath: the path to the file to be processed
    :return:
    """
    return processVibeFile(fileWriter, filePath, 2, True)


def processVibeFileSortByDsi(fileWriter, filePath):
    """
    Processes a single output file from the vibe benchmark.
    Writes benchmark output to file using the Disease Specificity Index for gene sorting.
    This should be stored in the fourth column and sort order will be highest->lowest.
    :param fileWriter: the file to write the output to
    :param filePath: the path to the file to be processed
    :return:
    """
    return processVibeFile(fileWriter, filePath, 3, True)


def processVibeFileSortByDpi(fileWriter, filePath):
    """
    Processes a single output file from the vibe benchmark.
    Writes benchmark output to file using the Disease Pleiotropy Index for gene sorting.
    This should be stored in the fourth column and sort order will be lowest->highest.
    :param fileWriter: the file to write the output to
    :param filePath: the path to the file to be processed
    :return:
    """
    return processVibeFile(fileWriter, filePath, 4, False)


def processVibeFile(fileWriter, filePath, sortColumn, reverseOrder):
    """
    Processes a single output file from the vibe benchmark.
    :param fileWriter: the file to write the output to
    :param filePath: the path to the file to be processed
    :param sortColumn: the column to be used for ordering the file being processed
    :param reverseOrder: whether the sort order should be reversed
    :return:
    """
    # Storage of genes with their score.
    geneScores = {}

    # Retrieves the genes.
    for i, line in enumerate(open(filePath)):
        # Skips header line.
        if i == 0:
            continue

        lineSplits = line.strip().split("\t")
        geneScores[lineSplits[0]] = float(lineSplits[sortColumn])

    for i,key in enumerate(sorted(geneScores, key=geneScores.get, reverse=reverseOrder)):
        print(key + " - " + str(geneScores.get(key)))
        if i > 1000:
            exit(0)

    # Sorts the output on the gene values (score) and writes this to the output file.
    fileWriter.write(','.join(sorted(geneScores, key=geneScores.get, reverse=reverseOrder)))


if __name__ == '__main__':
    main()
